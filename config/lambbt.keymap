/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>

#define ZMK_POINTING_DEFAULT_MOVE_VAL 900  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 10    // default: 10
#define NAV_L 1
#define OTHER_L 2
#define NUM_L 3
#define SYM_L 4

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
//&lt { quick-tap-ms = <200>; };

/ {
    behaviors {
        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 32 33 30 31>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 31 30 32 33>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
        };

        hrlt: hrlt {
            compatible = "zmk,behavior-hold-tap";
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            #binding-cells = <2>;
            bindings = <&mo>, <&kp>;

            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 32 33 30 31>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
            label = "HRLT";
        };

        hroa: hroa {
            compatible = "zmk,behavior-hold-tap";
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            #binding-cells = <2>;
            bindings = <&kp>, <&open_angle_quote>;

            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 32 33 30 31>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
            label = "HROA";
        };
    };

    combos {
        compatible = "zmk,combos";

        Esc {
            bindings = <&kp ESCAPE>;
            key-positions = <31 30>;
        };

        Del {
            bindings = <&mt RIGHT_ALT DELETE>;
            key-positions = <33 32>;
        };

        Media {
            bindings = <&mo 3>;
            key-positions = <31 32>;
        };

        Ralt {
            bindings = <&kp RIGHT_ALT>;
            key-positions = <30 33>;
        };

        z {
            bindings = <&kp Z>;
            key-positions = <21 22>;
        };

        b {
            bindings = <&kp B>;
            key-positions = <23 22>;
        };

        dot {
            bindings = <&kp N>;
            key-positions = <26 27>;
        };

        k {
            bindings = <&kp SLASH>;
            key-positions = <28 27>;
        };

        BestB {
            bindings = <&kp B>;
            key-positions = <4 14>;
        };

        BestDot {
            bindings = <&kp N>;
            key-positions = <15 5>;
        };
    };

    macros {
        open_angle_quote: open_angle_quote {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(NUMBER_2) &kp LS(SPACE)>;
            label = "OPEN_ANGLE_QUOTE";
        };

        closed_angle_quote: closed_angle_quote {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(SPACE) &kp LS(NUMBER_3)>;
            label = "CLOSED_ANGLE_QUOTE";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q            &kp W             &kp E                &kp R              &kp T        &kp Y                 &kp U               &kp I                 &kp O             &kp P
&hml LEFT_GUI A  &hml RIGHT_ALT S  &hml LEFT_CONTROL D  &hml LEFT_SHIFT F  &kp G        &kp H                 &hmr RIGHT_SHIFT J  &hmr RIGHT_CONTROL K  &hmr RIGHT_ALT L  &hmr RIGHT_GUI SEMICOLON
&kp Z            &kp X             &hml LALT C          &kp V              &kp B        &kp N                 &kp M               &hmr LALT COMMA       &kp PERIOD        &kp FSLH
                                                        &lt 1 SPACE        &lt 4 TAB    &mt LEFT_SHIFT ENTER  &lt 2 BACKSPACE
            >;
        };

        Nav {
            bindings = <
&trans  &trans  &trans             &trans                 &trans       &trans    &kp HOME       &kp END        &trans     &kp PRINTSCREEN
&trans  &trans  &hml LCTRL ESCAPE  &hml LEFT_SHIFT LC(B)  &kp RA(T)    &kp LEFT  &kp DOWN       &kp UP_ARROW   &kp RIGHT  &kp CAPS
&trans  &trans  &trans             &kp RA(SEMICOLON)      &trans       &trans    &kp PAGE_DOWN  &kp PAGE_DOWN  &trans     &trans
                                   &trans                 &trans       &trans    &kp DEL
            >;
        };

        Numeric {
            bindings = <
&kp F1              &kp F2                   &kp F3               &kp F4               &kp F5     &kp F6        &kp F7         &kp F8         &kp F9             &kp F10
&hml LGUI NUMBER_1  &hml RIGHT_ALT NUMBER_2  &hml LCTRL NUMBER_3  &hml LSHFT NUMBER_4  &kp N5     &kp NUMBER_6  &hmr RSHFT N7  &hmr RCTRL N8  &hmr RIGHT_ALT N9  &hmr LGUI N0
&trans              &kp LS(NUMBER_1)         &hroa LALT 0         &closed_angle_quote  &trans     &trans        &kp LS(N8)     &kp LS(N9)     &kp LS(N0)         &trans
                                                                  &kp F11              &kp F12    &kp F11       &kp F12
            >;
        };

        Media {
            bindings = <
&trans        &trans        &trans        &trans        &trans            &trans  &trans             &trans      &trans           &trans
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_CLR_ALL    &trans  &kp C_VOLUME_DOWN  &kp C_MUTE  &kp C_VOLUME_UP  &trans
&trans        &trans        &trans        &trans        &trans            &trans  &trans             &trans      &trans           &trans
                                          &trans        &trans            &trans  &trans
            >;
        };

        Mouse {
            bindings = <
&trans  &trans  &trans  &trans  &trans    &trans          &msc SCRL_LEFT  &msc SCRL_RIGHT  &trans           &trans
&trans  &trans  &trans  &trans  &trans    &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP     &mmv MOVE_RIGHT  &mkp MCLK
&trans  &trans  &trans  &trans  &trans    &trans          &msc SCRL_DOWN  &msc SCRL_UP     &trans           &trans
                        &trans  &trans    &mkp RCLK       &mkp LCLK
            >;
        };
    };
};
